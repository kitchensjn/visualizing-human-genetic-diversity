betweenness(lat) + (dimension**2)
2(betweenness(lat) + (dimension**2))
2*(betweenness(lat) + (dimension**2))
2*(betweenness(lat) + (dimension**2))-1
(2 * (betweenness(lat) + dimension**2) - 1) / ((dimension**2)**2)
determine_winner <- function(mouse, graph, traps) {
mouse_path <- shortest_paths(graph=graph, from=mouse["start"], to=mouse["stop"])$vpath[[1]]
steps <- match(traps, mouse_path)
if (all(is.na(steps))) {
return(NA)
} else {
return(match(min(steps, na.rm=TRUE), steps))
}
}
p1_trap_position <- 1
p2_trap_position <- 16
mice <- data.frame(
start=sample(x=1:(dimension**2), size=10000, replace=TRUE),
stop=sample(x=1:(dimension**2), size=10000, replace=TRUE)
)
mice$winner <- apply(mice, MARGIN=1, FUN=determine_winner, graph=lat, traps=c(p1_trap_position))
table(mice$winner)
test.file<-"/Users/jameskitchens/Documents/GitHub/geodist_analysis_final/data/geodist_counts_subsets/sgdp_paired/SS6004468_LP6005441-DNA_A05/new_1kg_nyc_hg38_filt_superpops_3x.geodist_cnt.txt.gz"
test_data<-read.table(test.file,as.is=TRUE)
View(test_data)
superpops<-read.table("/Users/jameskitchens/Documents/GitHub/geodist_analysis_final/params/poplists/superpops_panel.txt",as.is=TRUE)
these.rows<-which(nchar(test_data[,1])==5)
print(sum(test_data[,2])-sum(test_data[these.rows,2]))
split.key<-sapply(test_data[these.rows,1],function(a){strsplit(as.character(a),"")[[1]]})
split.key<-apply(split.key,2,as.numeric)
split.key<-as.data.frame(t(split.key))
colnames(split.key)<-c(as.character(superpops$V1))
polymorphic<-test_data[these.rows, ]
cutoff<-2
poly.Afr<-sum(polymorphic[split.key$AFR >=cutoff,2] )
poly.Eur<-sum(polymorphic[split.key$EUR >=cutoff,2] )
poly.Eas<-sum(polymorphic[split.key$EAS >=cutoff,2] )
poly.All<-sum(polymorphic[split.key$AFR >=cutoff & split.key$EUR >=cutoff & split.key$EAS >=cutoff,2])
#only.Afr<-sum(polymorphic[split.key$AFR >=cutoff & split.key$EUR !=2 & split.key$EAS !=2,2])
#only.Eur<-sum(polymorphic[split.key$AFR !=2 & split.key$EUR ==2 & split.key$EAS !=2,2])
#only.Eas<-sum(polymorphic[split.key$AFR !=2 & split.key$EUR !=2 & split.key$EAS ==2,2])
poly.Afr.Eur<-sum(polymorphic[split.key$AFR >=cutoff & split.key$EUR >=cutoff ,2])
poly.Afr.Eas<-sum(polymorphic[split.key$AFR >=cutoff &  split.key$EAS >=cutoff,2])
poly.Eur.Eas<-sum(polymorphic[ split.key$EUR >=cutoff & split.key$EAS >=cutoff,2])
grid.newpage()
overrideTriple=TRUE;draw.triple.venn(area1 = poly.Afr, area2 = poly.Eur, area3 = poly.Eas,
n12 = poly.Afr.Eur, n23 = poly.Eur.Eas, n13 = poly.Afr.Eas,
n123 = poly.All,scaled=FALSE,euler=FALSE,category=c("AFR","EUR","EAS"),
cat.col = c("green", "blue", "purple"),
col= c("green", "blue", "purple"))
install.packages("eulerr")
library(eulerr)
overrideTriple=TRUE;draw.triple.venn(area1 = poly.Afr, area2 = poly.Eur, area3 = poly.Eas,
n12 = poly.Afr.Eur, n23 = poly.Eur.Eas, n13 = poly.Afr.Eas,
n123 = poly.All,scaled=FALSE,euler=FALSE,category=c("AFR","EUR","EAS"),
cat.col = c("green", "blue", "purple"),
col= c("green", "blue", "purple"))
draw.triple.venn(area1 = poly.Afr, area2 = poly.Eur, area3 = poly.Eas,
n12 = poly.Afr.Eur, n23 = poly.Eur.Eas, n13 = poly.Afr.Eas,
n123 = poly.All,scaled=FALSE,euler=FALSE,category=c("AFR","EUR","EAS"),
cat.col = c("green", "blue", "purple"),
col= c("green", "blue", "purple"))
install.packages("VennDiagram")
library(VennDiagram)
overrideTriple=TRUE;
draw.triple.venn(area1 = poly.Afr, area2 = poly.Eur, area3 = poly.Eas,
n12 = poly.Afr.Eur, n23 = poly.Eur.Eas, n13 = poly.Afr.Eas,
n123 = poly.All,scaled=FALSE,euler=FALSE,category=c("AFR","EUR","EAS"),
cat.col = c("green", "blue", "purple"),
col= c("green", "blue", "purple"))
warnings()
# https://github.com/aabiddanda/geodist_analysis_final/tree/master/data/geodist_counts_subsets/sgdp_paired/SS6004468_LP6005441-DNA_A05
#test.file<-"/Users/gcoop/Downloads/new_1kg_nyc_hg38_filt_superpops_3x.geodist_cnt_Han.txt.gz"
#YRi/YRI
#test.file<-"/Users/gcoop/Downloads/new_1kg_nyc_hg38_filt_superpops_3x.geodist_cnt.txt"
#superpops<-read.table("/Users/gcoop/Downloads/superpops_panel.txt",as.is=TRUE)
test.file<-"/Users/jameskitchens/Documents/GitHub/geodist_analysis_final/data/geodist_counts_subsets/sgdp_paired/SS6004468_LP6005441-DNA_A05/new_1kg_nyc_hg38_filt_superpops_3x.geodist_cnt.txt.gz"
superpops<-read.table("/Users/jameskitchens/Documents/GitHub/geodist_analysis_final/params/poplists/superpops_panel.txt",as.is=TRUE)
test_data<-read.table(test.file,as.is=TRUE)
##total not found
these.rows<-which(nchar(test_data[,1])==5)
print(sum(test_data[,2])-sum(test_data[these.rows,2]))
split.key<-sapply(test_data[these.rows,1],function(a){strsplit(as.character(a),"")[[1]]})
split.key<-apply(split.key,2,as.numeric)
split.key<-as.data.frame(t(split.key))
colnames(split.key)<-c(as.character(superpops$V1))
polymorphic<-test_data[these.rows, ]
cutoff<-2
poly.Afr<-sum(polymorphic[split.key$AFR >=cutoff,2] )
poly.Eur<-sum(polymorphic[split.key$EUR >=cutoff,2] )
poly.Eas<-sum(polymorphic[split.key$EAS >=cutoff,2] )
poly.All<-sum(polymorphic[split.key$AFR >=cutoff & split.key$EUR >=cutoff & split.key$EAS >=cutoff,2])
#only.Afr<-sum(polymorphic[split.key$AFR >=cutoff & split.key$EUR !=2 & split.key$EAS !=2,2])
#only.Eur<-sum(polymorphic[split.key$AFR !=2 & split.key$EUR ==2 & split.key$EAS !=2,2])
#only.Eas<-sum(polymorphic[split.key$AFR !=2 & split.key$EUR !=2 & split.key$EAS ==2,2])
poly.Afr.Eur<-sum(polymorphic[split.key$AFR >=cutoff & split.key$EUR >=cutoff ,2])
poly.Afr.Eas<-sum(polymorphic[split.key$AFR >=cutoff &  split.key$EAS >=cutoff,2])
poly.Eur.Eas<-sum(polymorphic[ split.key$EUR >=cutoff & split.key$EAS >=cutoff,2])
grid.newpage()
library(eulerr)
library(VennDiagram)
overrideTriple=TRUE;
draw.triple.venn(area1 = poly.Afr, area2 = poly.Eur, area3 = poly.Eas,
n12 = poly.Afr.Eur, n23 = poly.Eur.Eas, n13 = poly.Afr.Eas,
n123 = poly.All,scaled=FALSE,euler=FALSE,category=c("AFR","EUR","EAS"),
cat.col = c("green", "blue", "purple"),
col= c("green", "blue", "purple"))
View(test_data)
View(superpops)
library("devtools")
devtools::install_github("jgroh/gnomwav")
gnomwav
library(gnomwav)
library(tidyverse)
library(ggplot2)
benchmark <- read.csv("/Users/jameskitchens/Downloads/benchmarking_new.csv")
View(benchmark)
ggplot(data=benchmark) +
geom_point(aes(paths, paths_time), color="red") +
geom_point(aes(paths, hybrid_r_time), color="blue") +
geom_point(aes(paths, hybrid_nr_time), color="black") +
geom_label(aes(paths, 250, label=paste("#Samples:", num_samples, "\n#Trees:", num_trees))) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix") +
theme_minimal()
ggplot(data=benchmark) +
geom_point(aes(paths, paths_time), color="red") +
geom_point(aes(paths, hybrid_r_time), color="blue") +
geom_point(aes(paths, hybrid_nr_time), color="black") +
#geom_label(aes(paths, 250, label=paste("#Samples:", num_samples, "\n#Trees:", num_trees))) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix") +
theme_minimal()
ggplot(data=file) +
geom_path(aes(num_samples, paths_time), color="red") +
geom_point(aes(num_samples, hybrid_r_time), color="blue") +
geom_point(aes(num_samples, hybrid_nr_time), color="black") +
geom_label(aes(num_samples, 500, label=algo_order)) +
geom_label(aes(num_samples, 400, label=paths)) +
ylim(0, 500) +
theme_minimal()
ggplot(data=benchmark) +
geom_path(aes(paths, paths_time), color="red") +
geom_point(aes(paths, hybrid_r_time), color="blue") +
geom_point(aes(paths, hybrid_nr_time), color="black") +
#geom_label(aes(paths, 250, label=paste("#Samples:", num_samples, "\n#Trees:", num_trees))) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix") +
theme_minimal()
ggplot(data=benchmark) +
geom_smooth(aes(paths, paths_time), color="red") +
geom_point(aes(paths, hybrid_r_time), color="blue") +
geom_point(aes(paths, hybrid_nr_time), color="black") +
#geom_label(aes(paths, 250, label=paste("#Samples:", num_samples, "\n#Trees:", num_trees))) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix") +
theme_minimal()
ggplot(data=benchmark) +
geom_smooth(aes(paths, paths_time), color="red") +
geom_smooth(aes(paths, hybrid_r_time), color="blue") +
geom_smooth(aes(paths, hybrid_nr_time), color="black") +
#geom_label(aes(paths, 250, label=paste("#Samples:", num_samples, "\n#Trees:", num_trees))) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix") +
theme_minimal()
topology <- read.csv("/Users/jameskitchens/Documents/GitHub/sparg2.0/jupyter_notebooks/benchmarking/topology.csv")
View(topology)
View(topology)
library(ggplot2)
file <- read.csv("/Users/jameskitchens/Documents/GitHub/sparg2.0/jupyter_notebooks/benchmarking/benchmarking_final.csv", colClasses=c(algo_order="character"))
filtered <- file[which(file$paths_sum!=file$hybrid_nr_sum),]
filtered <- file[which(file$paths_sum!=file$paths_modified_sum),]
View(filtered)
file$paths_sum <- round(file$paths_sum)
file$paths_modified_sum <- round(file$paths_modified_sum)
filtered <- file[which(file$paths_sum!=file$paths_modified_sum),]
ggplot(data=file) +
geom_point(aes(paths, paths_time, color="Paths"), alpha=0.3) +
geom_smooth(aes(paths, paths_time, color="Paths"), se=F) +
geom_point(aes(paths, hybrid_r_time, color="Hybrid (Recursive)"), alpha=0.3) +
geom_smooth(aes(paths, hybrid_r_time, color="Hybrid (Recursive)"), se=F) +
geom_point(aes(paths, paths_modified_time, color="Paths (Modified)"), alpha=0.3) +
geom_smooth(aes(paths, paths_modified_time, color="Paths (Modified)"), se=F) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix") +
theme_minimal()
ggplot(data=file) +
#geom_point(aes(paths, paths_time, color="Paths"), alpha=0.3) +
#geom_smooth(aes(paths, paths_time, color="Paths"), se=F) +
#geom_point(aes(paths, hybrid_r_time, color="Hybrid (Recursive)"), alpha=0.3) +
#geom_smooth(aes(paths, hybrid_r_time, color="Hybrid (Recursive)"), se=F) +
geom_point(aes(paths, paths_modified_time, color="Paths (Modified)"), alpha=0.3) +
geom_smooth(aes(paths, paths_modified_time, color="Paths (Modified)"), se=F) +
geom_point(aes(paths, top_down_time, color="Top Down"), alpha=0.3) +
geom_smooth(aes(paths, top_down_time, color="Top Down"), se=F) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix") +
theme_minimal()
ggplot(data=file) +
#geom_point(aes(paths, paths_time, color="Paths"), alpha=0.3) +
#geom_smooth(aes(paths, paths_time, color="Paths"), se=F) +
geom_point(aes(paths, hybrid_r_time, color="Hybrid (Recursive)"), alpha=0.3) +
geom_smooth(aes(paths, hybrid_r_time, color="Hybrid (Recursive)"), se=F) +
geom_point(aes(paths, paths_modified_time, color="Paths (Modified)"), alpha=0.3) +
geom_smooth(aes(paths, paths_modified_time, color="Paths (Modified)"), se=F) +
geom_point(aes(paths, top_down_time, color="Top Down"), alpha=0.3) +
geom_smooth(aes(paths, top_down_time, color="Top Down"), se=F) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix") +
theme_minimal()
filtered <- file[which(round(file$paths_sum)!=round(file$top_down_sum)),]
ggplot(data=file) +
#geom_point(aes(paths, paths_time, color="Paths"), alpha=0.3) +
#geom_smooth(aes(paths, paths_time, color="Paths"), se=F) +
#geom_point(aes(paths, hybrid_r_time, color="Hybrid (Recursive)"), alpha=0.3) +
#geom_smooth(aes(paths, hybrid_r_time, color="Hybrid (Recursive)"), se=F) +
geom_point(aes(paths, paths_modified_time, color="Paths (Modified)"), alpha=0.3) +
geom_smooth(aes(paths, paths_modified_time, color="Paths (Modified)"), se=F) +
geom_point(aes(paths, top_down_time, color="Top Down"), alpha=0.3) +
geom_smooth(aes(paths, top_down_time, color="Top Down"), se=F) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix") +
theme_minimal()
ggplot(data=file) +
geom_point(aes(paths, paths_time, color="Paths"), alpha=0.3) +
geom_smooth(aes(paths, paths_time, color="Paths"), se=F) +
geom_point(aes(paths, hybrid_r_time, color="Hybrid (Recursive)"), alpha=0.3) +
geom_smooth(aes(paths, hybrid_r_time, color="Hybrid (Recursive)"), se=F) +
geom_point(aes(paths, paths_modified_time, color="Paths (Modified)"), alpha=0.3) +
geom_smooth(aes(paths, paths_modified_time, color="Paths (Modified)"), se=F) +
geom_point(aes(paths, top_down_time, color="Top Down"), alpha=0.3) +
geom_smooth(aes(paths, top_down_time, color="Top Down"), se=F) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix") +
theme_minimal()
ggplot(data=file) +
geom_point(aes(paths, paths_time, color="Paths"), alpha=0.3) +
geom_smooth(aes(paths, paths_time, color="Paths"), se=F) +
geom_point(aes(paths, hybrid_r_time, color="Hybrid (Recursive)"), alpha=0.3) +
geom_smooth(aes(paths, hybrid_r_time, color="Hybrid (Recursive)"), se=F) +
geom_point(aes(paths, paths_modified_time, color="Paths (Modified)"), alpha=0.3) +
geom_smooth(aes(paths, paths_modified_time, color="Paths (Modified)"), se=F) +
geom_point(aes(paths, top_down_time, color="Top Down"), alpha=0.3) +
geom_smooth(aes(paths, top_down_time, color="Top Down"), se=F) +
ylim(min=0, max=1) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix") +
theme_minimal()
max(file$paths_modified_time)
ggplot(data=file) +
geom_point(aes(paths, paths_time, color="Paths"), alpha=0.3) +
geom_smooth(aes(paths, paths_time, color="Paths"), se=F) +
geom_point(aes(paths, hybrid_r_time, color="Hybrid (Recursive)"), alpha=0.3) +
geom_smooth(aes(paths, hybrid_r_time, color="Hybrid (Recursive)"), se=F) +
geom_point(aes(paths, paths_modified_time, color="Paths (Modified)"), alpha=0.3) +
geom_smooth(aes(paths, paths_modified_time, color="Paths (Modified)"), se=F) +
geom_point(aes(paths, top_down_time, color="Top Down"), alpha=0.3) +
geom_smooth(aes(paths, top_down_time, color="Top Down"), se=F) +
coord_cartesian(ylim=c(0, 1))
ggplot(data=file) +
geom_point(aes(paths, paths_time, color="Paths"), alpha=0.3) +
geom_smooth(aes(paths, paths_time, color="Paths"), se=F) +
geom_point(aes(paths, hybrid_r_time, color="Hybrid (Recursive)"), alpha=0.3) +
geom_smooth(aes(paths, hybrid_r_time, color="Hybrid (Recursive)"), se=F) +
geom_point(aes(paths, paths_modified_time, color="Paths (Modified)"), alpha=0.3) +
geom_smooth(aes(paths, paths_modified_time, color="Paths (Modified)"), se=F) +
geom_point(aes(paths, top_down_time, color="Top Down"), alpha=0.3) +
geom_smooth(aes(paths, top_down_time, color="Top Down"), se=F) +
coord_cartesian(ylim=c(0, 1)) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix") +
theme_minimal()
ggplot(data=file) +
geom_point(aes(paths, paths_time, color="Paths"), alpha=0.3) +
geom_smooth(aes(paths, paths_time, color="Paths"), se=F) +
geom_point(aes(paths, hybrid_r_time, color="Hybrid (Recursive)"), alpha=0.3) +
geom_smooth(aes(paths, hybrid_r_time, color="Hybrid (Recursive)"), se=F) +
geom_point(aes(paths, paths_modified_time, color="Paths (Modified)"), alpha=0.3) +
geom_smooth(aes(paths, paths_modified_time, color="Paths (Modified)"), se=F) +
geom_point(aes(paths, top_down_time, color="Top Down"), alpha=0.3) +
geom_smooth(aes(paths, top_down_time, color="Top Down"), se=F) +
#coord_cartesian(ylim=c(0, 1)) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix") +
theme_minimal()
ggplot(data=file) +
geom_point(aes(paths, paths_time, color="Paths"), alpha=0.3) +
geom_smooth(aes(paths, paths_time, color="Paths"), se=F) +
geom_point(aes(paths, hybrid_r_time, color="Hybrid (Recursive)"), alpha=0.3) +
geom_smooth(aes(paths, hybrid_r_time, color="Hybrid (Recursive)"), se=F) +
geom_point(aes(paths, paths_modified_time, color="Paths (Modified)"), alpha=0.3) +
geom_smooth(aes(paths, paths_modified_time, color="Paths (Modified)"), se=F) +
geom_point(aes(paths, top_down_time, color="Top Down"), alpha=0.3) +
geom_smooth(aes(paths, top_down_time, color="Top Down"), se=F) +
coord_cartesian(ylim=c(0, 1)) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix") +
theme_minimal()
ggplot(data=file) +
geom_point(aes(paths, paths_time, color="Paths"), alpha=0.3) +
geom_smooth(aes(paths, paths_time, color="Paths"), se=F) +
geom_point(aes(paths, hybrid_r_time, color="Hybrid (Recursive)"), alpha=0.3) +
geom_smooth(aes(paths, hybrid_r_time, color="Hybrid (Recursive)"), se=F) +
geom_point(aes(paths, paths_modified_time, color="Paths (Modified)"), alpha=0.3) +
geom_smooth(aes(paths, paths_modified_time, color="Paths (Modified)"), se=F) +
geom_point(aes(paths, top_down_time, color="Top Down"), alpha=0.3) +
geom_smooth(aes(paths, top_down_time, color="Top Down"), se=F) +
ylim(min=0, max=1) +
#coord_cartesian(ylim=c(0, 1)) +
xlab("Number of Paths in ARG") +
ylab("Time to Compute Covariance Matrix") +
theme_minimal()
setwd("~/Documents/GitHub/visualizing-human-genetic-diversity")
library(eulerr)
library(UpSetR)
library(jsonlite)
sum_snps <- function(pop_combo, pops, counts, cutoff) {
pop_tf <- rep(FALSE, length(pops))
pop_tf[pop_combo] <- TRUE
populations <- pops[pop_combo]
if (length(pop_combo) > 1) {
shared_common_snps <- which(rowSums(counts[,populations]>=cutoff)==length(populations))
} else {
shared_common_snps <- which(counts[,populations]>=cutoff)
}
snp_counts <- data.frame(t(c(pop_tf, sum(counts[shared_common_snps, ncol(counts)]))))
colnames(snp_counts) <- c(pops, "shared_common_snps")
return(snp_counts)
}
generate_euler_plot <- function(pairwise_file, poplist, selected_pops=c(), cutoff=3, common_pop="") {
data <- read.table(
file=pairwise_file,
col.names=c("geovar_code", "counts"),
colClasses=c("character", "numeric")
)
pops <- read.table(file=poplist)$V1
if (length(selected_pops) < 1) {
selected_pops <- pops
}
split.pops <- sapply(data[,1], function(a){strsplit(as.character(a),"")[[1]]})
split.pops <- apply(split.pops,2,as.numeric)
split.pops <- as.data.frame(t(split.pops))
row.names(split.pops) <- 1:nrow(split.pops)
colnames(split.pops) <- c(as.character(pops))
data <- cbind(split.pops, data)
data <- data[,c(selected_pops,"geovar_code","counts")]
if (common_pop!=""){
data <- data[which(data[common_pop]>=cutoff),]
}
combo_func <- Map(combn, list(1:length(selected_pops)), seq_along(1:length(selected_pops)), simplify=FALSE)
combinations <- unlist(combo_func, recursive=FALSE)
shared_common_snps <- do.call(rbind,lapply(combinations, FUN=sum_snps, pops=selected_pops, counts=data, cutoff=cutoff))
shared_common_snps[nrow(shared_common_snps),"unique_snps"] <- shared_common_snps[nrow(shared_common_snps),"shared_common_snps"]
for (i in (nrow(shared_common_snps)-1):1) {
shared_common_snps[i,"unique_snps"] <- shared_common_snps[i,"shared_common_snps"] - sum(
shared_common_snps[
apply(
shared_common_snps[,1:(ncol(shared_common_snps)-2)] - shared_common_snps[rep(i,nrow(shared_common_snps)),1:(ncol(shared_common_snps)-2)],
MARGIN=1,
FUN=function(x){!any(x<0)}
),"unique_snps"
], na.rm=TRUE
)
}
euler_data <- shared_common_snps$unique_snps
names(euler_data) <- apply(shared_common_snps, 1, function(x){paste(names(x)[which(x==1)],collapse="&")})
return(list("sets"=euler_data,"euler"=eulerr::euler(euler_data, shape = "ellipse"),"size"=sum(shared_common_snps$unique_snps)))
}
generate_d3_euler <- function(pops, common_pop="", supplemental="") {
if (common_pop != "") {
pops_euler <- generate_euler_plot("assets/new_1kg_nyc_hg38_filt_total.biallelic_snps.pops.ncat_000_001_005_010_100.geodist.total.txt", "assets/poplists/pops_panel.txt", selected_pops=pops, common_pop=common_pop)
} else {
pops_euler <- generate_euler_plot("assets/new_1kg_nyc_hg38_filt_total.biallelic_snps.pops.ncat_000_001_005_010_100.geodist.total.txt", "assets/poplists/pops_panel.txt", selected_pops=pops)
}
if (supplemental == "") {
supplemental <- read.table(file="assets/supplemental.txt", sep="\t", header=TRUE)
supplemental <- supplemental[,c("Population.description", "Population.code..1KGP.", "NumberOfSampledIndividualsPhase3")]
colnames(supplemental) <- c("description", "abbreviation", "sampled_individuals")
}
ellipses_coordinates <- pops_euler$euler$ellipses
ellipses_coordinates$abbreviation <- row.names(ellipses_coordinates)
ellipses_coordinates$common_variants <- sapply(pops, FUN=function(pop, euler) {return(sum(euler[grepl(pop, names(euler))]))}, euler=pops_euler$sets)
ellipses_coordinates$unshared_common_variants <- pops_euler$sets[pops]
ellipses_coordinates <- merge(ellipses_coordinates, supplemental, by="abbreviation")
ellipses_coordinates$color <- colors[1:length(pops)]
ellipses_coordinates$fill <- "none"
ellipses_coordinates$stroke_dasharray <- "none"
return(list("ellipses_coord"=ellipses_coordinates,"stress"=pops_euler$euler$stress, "diagError"=pops_euler$euler$diagError))
}
# Color Palette from https://davidmathlogic.com/colorblind/#%23000000-%23E69F00-%2356B4E9-%23009E73-%23F0E442-%230072B2-%23D55E00-%23CC79A7
colors <- c("#D55E00", "#0072B2", "#CC79A7", "#009E73", "#56B4E9", "#E69F00", "#000000")
separated_amr <- amr_ellipses_coordinates$ellipses_coord$common_variants
AMR <- c("ACB", "ASW", "CEU", "CLM", "MXL", "PEL", "PUR")
amr_ellipses_coordinates <- generate_d3_euler(pops=AMR)
separated_amr <- amr_ellipses_coordinates$ellipses_coord$common_variants
names(separated_amr) <- amr_ellipses_coordinates$ellipses_coord$abbreviation
separated_amr_euler <- eulerr::euler(separated_amr, shape="ellipse")
separated_ellipses_coordinates <- separated_amr_euler$ellipses
separated_ellipses_coordinates$abbreviation <- row.names(separated_ellipses_coordinates)
separated_ellipses_coordinates <- merge(separated_ellipses_coordinates, amr_ellipses_coordinates$ellipses_coord[,-which(names(amr_ellipses_coordinates$ellipses_coord) %in% c("h", "k", "a", "b", "phi"))], by="abbreviation")
separated_ellipses_coordinates <- separated_ellipses_coordinates[order(separated_ellipses_coordinates$common_variants),]
heptagram <- data.frame(
x=c(4000*cos(2*pi/7), 4000*cos(4*pi/7), 4000*cos(6*pi/7), 4000*cos(6*pi/7), 4000*cos(4*pi/7), 4000*cos(2*pi/7), 4000),
y=c(-4000*sin(2*pi/7), -4000*sin(4*pi/7), -4000*sin(6*pi/7), 4000*sin(6*pi/7), 4000*sin(4*pi/7), 4000*sin(2*pi/7), 0)
)
separated_ellipses_coordinates$h <- heptagram$x
separated_ellipses_coordinates$k <- heptagram$y
toJSON(separated_ellipses_coordinates)
View(separated_ellipses_coordinates)
View(separated_ellipses_coordinates)
View(separated_ellipses_coordinates)
View(separated_ellipses_coordinates)
View(separated_ellipses_coordinates)
separated_amr <- amr_ellipses_coordinates$ellipses_coord$common_variants
names(separated_amr) <- amr_ellipses_coordinates$ellipses_coord$abbreviation
separated_amr_euler <- eulerr::euler(separated_amr, shape="ellipse")
separated_ellipses_coordinates <- separated_amr_euler$ellipses
separated_ellipses_coordinates$abbreviation <- row.names(separated_ellipses_coordinates)
separated_ellipses_coordinates <- merge(separated_ellipses_coordinates, amr_ellipses_coordinates$ellipses_coord[,-which(names(amr_ellipses_coordinates$ellipses_coord) %in% c("h", "k", "a", "b", "phi"))], by="abbreviation")
separated_ellipses_coordinates <- separated_ellipses_coordinates[order(separated_ellipses_coordinates$common_variants),]
heptagram <- data.frame(
x=c(4000*cos(2*pi/7), 4000*cos(2*pi/7), 4000*cos(4*pi/7), 4000*cos(4*pi/7), 4000*cos(6*pi/7), 4000*cos(6*pi/7), 4000),
y=c(-4000*sin(2*pi/7), 4000*sin(2*pi/7), -4000*sin(4*pi/7), 4000*sin(4*pi/7), -4000*sin(6*pi/7), 4000*sin(6*pi/7), 0)
)
#heptagram <- data.frame(
#  x=c(4000*cos(2*pi/7), 4000*cos(4*pi/7), 4000*cos(6*pi/7), 4000*cos(6*pi/7), 4000*cos(4*pi/7), 4000*cos(2*pi/7), 4000),
#  y=c(-4000*sin(2*pi/7), -4000*sin(4*pi/7), -4000*sin(6*pi/7), 4000*sin(6*pi/7), 4000*sin(4*pi/7), 4000*sin(2*pi/7), 0)
#)
separated_ellipses_coordinates$h <- heptagram$x
separated_ellipses_coordinates$k <- heptagram$y
toJSON(separated_ellipses_coordinates)
View(separated_ellipses_coordinates)
separated_amr <- amr_ellipses_coordinates$ellipses_coord$common_variants
names(separated_amr) <- amr_ellipses_coordinates$ellipses_coord$abbreviation
separated_amr_euler <- eulerr::euler(separated_amr, shape="ellipse")
separated_ellipses_coordinates <- separated_amr_euler$ellipses
separated_ellipses_coordinates$abbreviation <- row.names(separated_ellipses_coordinates)
separated_ellipses_coordinates <- merge(separated_ellipses_coordinates, amr_ellipses_coordinates$ellipses_coord[,-which(names(amr_ellipses_coordinates$ellipses_coord) %in% c("h", "k", "a", "b", "phi"))], by="abbreviation")
separated_ellipses_coordinates <- separated_ellipses_coordinates[order(separated_ellipses_coordinates$common_variants),]
heptagram <- data.frame(
x=c(4000*cos(2*pi/7), 4000*cos(2*pi/7), 4000*cos(6*pi/7), 4000*cos(4*pi/7), 4000*cos(4*pi/7), 4000*cos(6*pi/7), 4000),
y=c(-4000*sin(2*pi/7), 4000*sin(2*pi/7), 4000*sin(6*pi/7), -4000*sin(4*pi/7), 4000*sin(4*pi/7), -4000*sin(6*pi/7), 0)
)
#heptagram <- data.frame(
#  x=c(4000*cos(2*pi/7), 4000*cos(4*pi/7), 4000*cos(6*pi/7), 4000*cos(6*pi/7), 4000*cos(4*pi/7), 4000*cos(2*pi/7), 4000),
#  y=c(-4000*sin(2*pi/7), -4000*sin(4*pi/7), -4000*sin(6*pi/7), 4000*sin(6*pi/7), 4000*sin(4*pi/7), 4000*sin(2*pi/7), 0)
#)
separated_ellipses_coordinates$h <- heptagram$x
separated_ellipses_coordinates$k <- heptagram$y
toJSON(separated_ellipses_coordinates)
View(separated_ellipses_coordinates)
View(separated_ellipses_coordinates)
separated_amr <- amr_ellipses_coordinates$ellipses_coord$common_variants
names(separated_amr) <- amr_ellipses_coordinates$ellipses_coord$abbreviation
separated_amr_euler <- eulerr::euler(separated_amr, shape="ellipse")
separated_ellipses_coordinates <- separated_amr_euler$ellipses
separated_ellipses_coordinates$abbreviation <- row.names(separated_ellipses_coordinates)
separated_ellipses_coordinates <- merge(separated_ellipses_coordinates, amr_ellipses_coordinates$ellipses_coord[,-which(names(amr_ellipses_coordinates$ellipses_coord) %in% c("h", "k", "a", "b", "phi"))], by="abbreviation")
separated_ellipses_coordinates <- separated_ellipses_coordinates[order(separated_ellipses_coordinates$common_variants),]
heptagram <- data.frame(
x=c(4000*cos(2*pi/7), 4000*cos(2*pi/7), 4000*cos(6*pi/7), 4000*cos(4*pi/7), 4000*cos(6*pi/7), 4000*cos(4*pi/7), 4000),
y=c(-4000*sin(2*pi/7), 4000*sin(2*pi/7), 4000*sin(6*pi/7), -4000*sin(4*pi/7), -4000*sin(6*pi/7), 4000*sin(4*pi/7), 0)
)
#heptagram <- data.frame(
#  x=c(4000*cos(2*pi/7), 4000*cos(4*pi/7), 4000*cos(6*pi/7), 4000*cos(6*pi/7), 4000*cos(4*pi/7), 4000*cos(2*pi/7), 4000),
#  y=c(-4000*sin(2*pi/7), -4000*sin(4*pi/7), -4000*sin(6*pi/7), 4000*sin(6*pi/7), 4000*sin(4*pi/7), 4000*sin(2*pi/7), 0)
#)
separated_ellipses_coordinates$h <- heptagram$x
separated_ellipses_coordinates$k <- heptagram$y
toJSON(separated_ellipses_coordinates)
View(separated_ellipses_coordinates)
View(separated_ellipses_coordinates)
View(separated_ellipses_coordinates)
View(separated_ellipses_coordinates)
separated_amr <- amr_ellipses_coordinates$ellipses_coord$common_variants
names(separated_amr) <- amr_ellipses_coordinates$ellipses_coord$abbreviation
separated_amr_euler <- eulerr::euler(separated_amr, shape="ellipse")
separated_ellipses_coordinates <- separated_amr_euler$ellipses
separated_ellipses_coordinates$abbreviation <- row.names(separated_ellipses_coordinates)
separated_ellipses_coordinates <- merge(separated_ellipses_coordinates, amr_ellipses_coordinates$ellipses_coord[,-which(names(amr_ellipses_coordinates$ellipses_coord) %in% c("h", "k", "a", "b", "phi"))], by="abbreviation")
separated_ellipses_coordinates <- separated_ellipses_coordinates[order(separated_ellipses_coordinates$common_variants),]
heptagram <- data.frame(
x=c(4000*cos(2*pi/7), 4000*cos(2*pi/7), 4000*cos(6*pi/7), 4000*cos(6*pi/7), 4000*cos(4*pi/7), 4000*cos(4*pi/7), 4000),
y=c(-4000*sin(2*pi/7), 4000*sin(2*pi/7), 4000*sin(6*pi/7), -4000*sin(6*pi/7), 4000*sin(4*pi/7), -4000*sin(4*pi/7), 0)
)
#heptagram <- data.frame(
#  x=c(4000*cos(2*pi/7), 4000*cos(4*pi/7), 4000*cos(6*pi/7), 4000*cos(6*pi/7), 4000*cos(4*pi/7), 4000*cos(2*pi/7), 4000),
#  y=c(-4000*sin(2*pi/7), -4000*sin(4*pi/7), -4000*sin(6*pi/7), 4000*sin(6*pi/7), 4000*sin(4*pi/7), 4000*sin(2*pi/7), 0)
#)
separated_ellipses_coordinates$h <- heptagram$x
separated_ellipses_coordinates$k <- heptagram$y
toJSON(separated_ellipses_coordinates)
global <- generate_d3_euler(pops=c("BEB", "CHB", "GBR", "MXL", "YRI"))
error_df <- rbind(error_df, data.frame("figure"="6", "stress"=global$stress, "diagError"=global$diagError))
toJSON(global$ellipses_coord)
global <- generate_d3_euler(pops=c("BEB", "CHB", "GBR", "MXL", "YRI"))
toJSON(global$ellipses_coord)
global <- generate_d3_euler(pops=c("BEB", "CHB", "GBR", "MXL", "YRI"))
toJSON(global$ellipses_coord)
global <- generate_d3_euler(pops=c("BEB", "CHB", "GBR", "MXL", "YRI"))
toJSON(global$ellipses_coord)
global <- generate_d3_euler(pops=c("BEB", "CHB", "GBR", "MXL", "YRI"))
toJSON(global$ellipses_coord)
global <- generate_d3_euler(pops=c("BEB", "CHB", "GBR", "MXL", "YRI"))
toJSON(global$ellipses_coord)
AMR <- c("ACB", "ASW", "CEU", "CLM", "MXL", "PEL", "PUR")
amr_ellipses_coordinates <- generate_d3_euler(pops=AMR)
toJSON(amr_ellipses_coordinates$ellipses_coord)
amr_ellipses_coordinates <- generate_d3_euler(pops=AMR)
toJSON(amr_ellipses_coordinates$ellipses_coord)
amr_ellipses_coordinates <- generate_d3_euler(pops=AMR)
toJSON(amr_ellipses_coordinates$ellipses_coord)
